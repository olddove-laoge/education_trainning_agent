{
  "courses": [
    {
      "id": 1,
      "teacher_id": 2,
      "title": "Tensorflow\u57fa\u7840\u77e5\u8bc6",
      "content": "<p>```markdown</p>\n<h1>TensorFlow.js \u57fa\u7840\u6559\u5b66\u65b9\u6848</h1>\n<h2>1. \u6559\u5b66\u76ee\u6807</h2>\n<ul>\n<li><strong>\u77e5\u8bc6\u76ee\u6807</strong>  </li>\n<li>\u7406\u89e3TensorFlow.js\u7684\u6838\u5fc3\u6982\u5ff5\uff08\u5f20\u91cf\u3001\u53d8\u91cf\u3001\u64cd\u4f5c\u3001\u6a21\u578b\u67b6\u6784\uff09</li>\n<li>\u638c\u63e1Layers API\u4e0eCore API\u7684\u533a\u522b\u4e0e\u5e94\u7528\u573a\u666f</li>\n<li>\u719f\u6089TensorFlow.js\u5728\u6d4f\u89c8\u5668/Node.js\u73af\u5883\u4e2d\u7684\u90e8\u7f72\u6d41\u7a0b</li>\n<li><strong>\u6280\u80fd\u76ee\u6807</strong>  </li>\n<li>\u80fd\u521b\u5efa\u5e76\u64cd\u4f5c\u5f20\u91cf\u6570\u636e</li>\n<li>\u80fd\u4f7f\u7528Layers API\u6784\u5efa\u7b80\u5355\u795e\u7ecf\u7f51\u7edc\u6a21\u578b</li>\n<li>\u80fd\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884cTensorFlow.js\u6a21\u578b\u63a8\u7406</li>\n</ul>\n<hr />\n<h2>2. \u77e5\u8bc6\u8bb2\u89e3</h2>\n<h3>\u6838\u5fc3\u77e5\u8bc6\u70b91\uff1a\u5f20\u91cf\uff08Tensor\uff09</h3>\n<ul>\n<li><strong>\u5b9a\u4e49</strong>\uff1a\u591a\u7ef4\u6570\u7ec4\uff0c\u662fTensorFlow.js\u7684\u6838\u5fc3\u6570\u636e\u7ed3\u6784</li>\n<li><strong>\u7279\u6027</strong>\uff1a</li>\n<li>\u4e0d\u53ef\u53d8\u6027\uff08\u64cd\u4f5c\u751f\u6210\u65b0\u5f20\u91cf\uff09</li>\n<li>\u652f\u6301\u81ea\u52a8\u5f62\u72b6\u63a8\u65ad</li>\n<li><strong>\u793a\u4f8b\u4ee3\u7801</strong>\uff1a\n  <code>javascript\n  // \u521b\u5efa2x3\u5f20\u91cf\n  const a = tf.tensor([[1, 2, 3], [10, 20, 30]]);\n  a.print(); // \u8f93\u51fa\u5f20\u91cf\u503c</code></li>\n</ul>\n<h3>\u6838\u5fc3\u77e5\u8bc6\u70b92\uff1a\u53d8\u91cf\uff08Variable\uff09</h3>\n<ul>\n<li><strong>\u5b9a\u4e49</strong>\uff1a\u53ef\u53d8\u72b6\u6001\u7684\u5f20\u91cf\u5bb9\u5668</li>\n<li><strong>\u5e94\u7528\u573a\u666f</strong>\uff1a\u6a21\u578b\u6743\u91cd\u5b58\u50a8</li>\n<li><strong>\u793a\u4f8b\u4ee3\u7801</strong>\uff1a\n  <code>javascript\n  const initial = tf.zeros([3]);\n  const weights = tf.variable(initial);\n  weights.assign(tf.tensor1d([0.1, 0.2, 0.3]));</code></li>\n</ul>\n<h3>\u6838\u5fc3\u77e5\u8bc6\u70b93\uff1a\u64cd\u4f5c\uff08Ops\uff09</h3>\n<ul>\n<li><strong>\u5206\u7c7b</strong>\uff1a</li>\n<li>\u6570\u5b66\u8fd0\u7b97\uff08add/mul/square\uff09</li>\n<li>\u7ebf\u6027\u4ee3\u6570\u8fd0\u7b97\uff08matMul\uff09</li>\n<li><strong>\u793a\u4f8b\u4ee3\u7801</strong>\uff1a\n  <code>javascript\n  const b = tf.tensor2d([[4,5], [6,7]]);\n  const b_squared = b.square(); // \u9010\u5143\u7d20\u5e73\u65b9</code></li>\n</ul>\n<h3>\u6838\u5fc3\u77e5\u8bc6\u70b94\uff1a\u6a21\u578b\u6784\u5efa\uff08Layers API\uff09</h3>\n<ul>\n<li><strong>\u4e24\u79cd\u65b9\u5f0f</strong>\uff1a</li>\n<li>Sequential\u6a21\u578b\uff08\u5c42\u53e0\u5f0f\uff09</li>\n<li>Functional\u6a21\u578b\uff08\u7075\u6d3b\u62d3\u6251\uff09</li>\n<li><strong>\u793a\u4f8b\u4ee3\u7801</strong>\uff1a\n  <code>javascript\n  const model = tf.sequential({\n    layers: [\n      tf.layers.dense({units: 32, inputShape: [10]}),\n      tf.layers.dense({units: 1})\n    ]\n  });</code></li>\n</ul>\n<hr />\n<h2>3. \u5b9e\u8bad\u7ec3\u4e60</h2>\n<h3>\u7ec3\u4e601\uff1a\u5f20\u91cf\u57fa\u7840\u64cd\u4f5c\uff0810\u5206\u949f\uff09</h3>\n<ul>\n<li><strong>\u4efb\u52a1</strong>\uff1a</li>\n<li>\u521b\u5efa3x3\u968f\u673a\u5f20\u91cf</li>\n<li>\u8ba1\u7b97\u5f20\u91cf\u6240\u6709\u5143\u7d20\u5e73\u5747\u503c</li>\n<li><strong>\u5173\u952e\u4ee3\u7801</strong>\uff1a\n  <code>javascript\n  const x = tf.randomNormal([3,3]);\n  const mean = x.mean();</code></li>\n</ul>\n<h3>\u7ec3\u4e602\uff1a\u6784\u5efa\u56de\u5f52\u6a21\u578b\uff0815\u5206\u949f\uff09</h3>\n<ul>\n<li><strong>\u4efb\u52a1</strong>\uff1a</li>\n<li>\u4f7f\u7528Sequential API\u6784\u5efa\u5355\u5c42\u56de\u5f52\u6a21\u578b</li>\n<li>\u7f16\u8bd1\u6a21\u578b\u5e76\u9884\u6d4b\u6d4b\u8bd5\u6570\u636e</li>\n<li><strong>\u5173\u952e\u4ee3\u7801</strong>\uff1a\n  <code>javascript\n  model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n  model.predict(tf.tensor2d([[0.5]])).print();</code></li>\n</ul>\n<hr />\n<h2>4. \u65f6\u95f4\u5206\u914d\u5efa\u8bae\uff0845\u5206\u949f\uff09</h2>\n<p>| \u73af\u8282        | \u65f6\u957f   | \u5185\u5bb9                     |\n|-------------|--------|--------------------------|\n| \u77e5\u8bc6\u8bb2\u89e3    | 20min  | 4\u4e2a\u6838\u5fc3\u77e5\u8bc6\u70b9            |\n| \u7ec3\u4e601       | 10min  | \u5f20\u91cf\u64cd\u4f5c                 |\n| \u7ec3\u4e602       | 12min  | \u6a21\u578b\u6784\u5efa                 |\n| \u603b\u7ed3Q&amp;A     | 3min   | \u91cd\u70b9\u56de\u987e\u4e0e\u95ee\u9898\u89e3\u7b54       |</p>\n<hr />\n<h2>5. \u6559\u5b66\u8d44\u6e90\u5efa\u8bae</h2>\n<ul>\n<li><strong>\u5b98\u65b9\u6587\u6863</strong><br />\n<a href=\"https://js.tensorflow.org/api/latest/\">TensorFlow.js\u5b98\u65b9\u6307\u5357</a></li>\n<li><strong>\u5728\u7ebf\u5b9e\u9a8c\u73af\u5883</strong><br />\n<a href=\"https://codepen.io/pen?template=JjXgzQG\">CodePen TensorFlow.js\u6a21\u677f</a></li>\n<li><strong>\u6269\u5c55\u9605\u8bfb</strong><br />\n  \u300aDeep Learning with JavaScript\u300b\uff08\u4e2d\u6587\u7248\u300aJavaScript\u6df1\u5ea6\u5b66\u4e60\u300b\uff09\n``` </li>\n</ul>\n<p>\u6ce8\uff1a\u5b9e\u9645\u6559\u5b66\u53ef\u6839\u636e\u5b66\u751f\u57fa\u7840\u8c03\u6574\u7ec3\u4e60\u96be\u5ea6\uff0c\u5efa\u8bae\u63d0\u524d\u5b89\u88c5Chrome\u6d4f\u89c8\u5668+VS Code\u73af\u5883\u3002</p>",
      "created_at": "2025-07-23T01:01:07.484839"
    },
    {
      "id": 2,
      "teacher_id": 2,
      "title": "Tensorflow\u57fa\u7840\u77e5\u8bc6",
      "content": "<p>```markdown</p>\n<h1>TensorFlow.js \u57fa\u7840\u6559\u5b66\u65b9\u6848</h1>\n<h2>1. \u6559\u5b66\u76ee\u6807</h2>\n<ul>\n<li><strong>\u77e5\u8bc6\u76ee\u6807</strong>  </li>\n<li>\u7406\u89e3TensorFlow.js\u7684\u6838\u5fc3\u6982\u5ff5\uff08\u5f20\u91cf\u3001\u53d8\u91cf\u3001\u64cd\u4f5c\u3001\u6a21\u578b\u67b6\u6784\uff09</li>\n<li>\u638c\u63e1Layers API\u4e0eCore API\u7684\u533a\u522b\u53ca\u9002\u7528\u573a\u666f</li>\n<li>\u719f\u6089TensorFlow.js\u5728\u6d4f\u89c8\u5668\u548cNode.js\u73af\u5883\u4e2d\u7684\u90e8\u7f72\u4f18\u52bf</li>\n<li><strong>\u6280\u80fd\u76ee\u6807</strong>  </li>\n<li>\u80fd\u521b\u5efa\u5e76\u64cd\u4f5c\u5f20\u91cf/\u53d8\u91cf</li>\n<li>\u80fd\u7528Layers API\u6784\u5efaSequential\u6a21\u578b</li>\n<li>\u80fd\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7b80\u5355\u7684TensorFlow.js\u6a21\u578b</li>\n</ul>\n<h2>2. \u77e5\u8bc6\u8bb2\u89e3</h2>\n<h3>\u6838\u5fc3\u77e5\u8bc6\u70b91\uff1a\u5f20\u91cf\uff08Tensor\uff09</h3>\n<ul>\n<li><strong>\u5b9a\u4e49</strong>\uff1a\u591a\u7ef4\u6570\u7ec4\uff0c\u662fTensorFlow.js\u7684\u57fa\u7840\u6570\u636e\u7ed3\u6784</li>\n<li><strong>\u7279\u6027</strong>\uff1a</li>\n<li>\u4e0d\u53ef\u53d8\u6027\uff08\u64cd\u4f5c\u751f\u6210\u65b0\u5f20\u91cf\uff09</li>\n<li>\u901a\u8fc7<code>shape</code>\u5c5e\u6027\u63cf\u8ff0\u7ef4\u5ea6\uff08\u5982<code>[2,3]</code>\u8868\u793a2\u884c3\u5217\uff09</li>\n<li><strong>\u793a\u4f8b\u4ee3\u7801</strong>\uff1a\n  <code>javascript\n  const a = tf.tensor([[1, 2], [3, 4]]);\n  a.print(); // \u8f93\u51fa2x2\u77e9\u9635</code></li>\n</ul>\n<h3>\u6838\u5fc3\u77e5\u8bc6\u70b92\uff1a\u53d8\u91cf\uff08Variable\uff09</h3>\n<ul>\n<li><strong>\u5b9a\u4e49</strong>\uff1a\u53ef\u53d8\u72b6\u6001\u7684\u5f20\u91cf\uff0c\u7528\u4e8e\u6a21\u578b\u53c2\u6570\uff08\u5982\u6743\u91cd/\u504f\u7f6e\uff09</li>\n<li><strong>\u5173\u952e\u65b9\u6cd5</strong>\uff1a</li>\n<li><code>tf.variable()</code>\u521d\u59cb\u5316</li>\n<li><code>assign()</code>\u66f4\u65b0\u503c</li>\n<li><strong>\u793a\u4f8b\u4ee3\u7801</strong>\uff1a\n  <code>javascript\n  const initial = tf.zeros([3]);\n  const weights = tf.variable(initial);\n  weights.assign(tf.tensor1d([0.1, 0.2, 0.3]));</code></li>\n</ul>\n<h3>\u6838\u5fc3\u77e5\u8bc6\u70b93\uff1a\u64cd\u4f5c\uff08Ops\uff09</h3>\n<ul>\n<li><strong>\u5206\u7c7b</strong>\uff1a</li>\n<li>\u4e8c\u5143\u8fd0\u7b97\uff08\u5982<code>add()</code>, <code>mul()</code>\uff09</li>\n<li>\u4e00\u5143\u8fd0\u7b97\uff08\u5982<code>square()</code>, <code>relu()</code>\uff09</li>\n<li><strong>\u7279\u6027</strong>\uff1a</li>\n<li>\u652f\u6301\u94fe\u5f0f\u8c03\u7528</li>\n<li>\u81ea\u52a8\u5e7f\u64ad\uff08\u4e0d\u540c\u5f62\u72b6\u5f20\u91cf\u8fd0\u7b97\uff09</li>\n<li><strong>\u793a\u4f8b\u4ee3\u7801</strong>\uff1a\n  <code>javascript\n  const b = tf.tensor([5, 6]);\n  const sum = a.add(b); // \u77e9\u9635+\u5411\u91cf\u5e7f\u64ad</code></li>\n</ul>\n<h3>\u6838\u5fc3\u77e5\u8bc6\u70b94\uff1a\u6a21\u578b\u6784\u5efa\uff08Layers API\uff09</h3>\n<ul>\n<li><strong>\u4e24\u79cd\u65b9\u5f0f</strong>\uff1a</li>\n<li><strong>Sequential\u6a21\u578b</strong>\uff1a\u7ebf\u6027\u5806\u53e0\u5c42\n    <code>javascript\n    const model = tf.sequential({\n      layers: [\n        tf.layers.dense({units: 32, inputShape: [784]}),\n        tf.layers.dense({units: 10})\n      ]\n    });</code></li>\n<li><strong>Functional\u6a21\u578b</strong>\uff1a\u652f\u6301\u590d\u6742\u62d3\u6251\uff08\u5982\u591a\u8f93\u5165/\u8f93\u51fa\uff09</li>\n</ul>\n<h2>3. \u5b9e\u8bad\u7ec3\u4e60</h2>\n<h3>\u7ec3\u4e601\uff1a\u5f20\u91cf\u57fa\u7840\u64cd\u4f5c</h3>\n<ul>\n<li><strong>\u4efb\u52a1</strong>\uff1a\u521b\u5efa3x3\u968f\u673a\u5f20\u91cf\uff0c\u8ba1\u7b97\u5176\u5e73\u65b9\u548c\u5747\u503c</li>\n<li><strong>\u5173\u952e\u4ee3\u7801</strong>\uff1a\n  <code>javascript\n  const x = tf.randomNormal([3, 3]);\n  const squared = x.square();\n  const mean = squared.mean();</code></li>\n</ul>\n<h3>\u7ec3\u4e602\uff1a\u6784\u5efa\u56de\u5f52\u6a21\u578b</h3>\n<ul>\n<li><strong>\u4efb\u52a1</strong>\uff1a\u7528Sequential API\u6784\u5efa\u5355\u5c42\u7ebf\u6027\u56de\u5f52\u6a21\u578b</li>\n<li><strong>\u5173\u952e\u4ee3\u7801</strong>\uff1a\n  <code>javascript\n  const model = tf.sequential();\n  model.add(tf.layers.dense({units: 1, inputShape: [1]}));\n  model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});</code></li>\n</ul>\n<h2>4. \u65f6\u95f4\u5206\u914d\u5efa\u8bae</h2>\n<p>| \u9636\u6bb5         | \u65f6\u957f   | \u5185\u5bb9                     |\n|--------------|--------|--------------------------|\n| \u6559\u5b66\u76ee\u6807     | 5min   | \u4ecb\u7ecd\u5b66\u4e60\u91cd\u70b9             |\n| \u77e5\u8bc6\u8bb2\u89e3     | 20min  | 4\u4e2a\u6838\u5fc3\u77e5\u8bc6\u70b9\u5206\u6b65\u6f14\u793a    |\n| \u5b9e\u8bad\u7ec3\u4e60     | 15min  | \u6307\u5bfc\u5b8c\u6210\u4e24\u4e2a\u7ec3\u4e60         |\n| \u603b\u7ed3\u7b54\u7591     | 5min   | \u56de\u987e\u5173\u952e\u6982\u5ff5             |</p>\n<h2>5. \u6559\u5b66\u8d44\u6e90\u5efa\u8bae</h2>\n<ul>\n<li><strong>\u5b98\u65b9\u6587\u6863</strong>\uff1a</li>\n<li><a href=\"https://www.tensorflow.org/js/guide\">TensorFlow.js\u5b98\u65b9\u6307\u5357</a></li>\n<li><strong>\u5728\u7ebf\u5de5\u5177</strong>\uff1a</li>\n<li><a href=\"https://playground.tensorflow.org/\">TensorFlow.js Playground</a></li>\n<li><strong>\u6269\u5c55\u9605\u8bfb</strong>\uff1a</li>\n<li>\u300aDeep Learning with JavaScript\u300b\uff08Manning\u51fa\u7248\u793e\uff09\n``` </li>\n</ul>\n<blockquote>\n<p>\u6ce8\uff1a\u5b9e\u9645\u6559\u5b66\u4e2d\u5efa\u8bae\u4f7f\u7528CodePen\u6216JSFiddle\u5b9e\u65f6\u6f14\u793a\u4ee3\u7801\uff0c\u6d4f\u89c8\u5668\u5f00\u53d1\u8005\u5de5\u5177\u53ef\u76f4\u89c2\u5c55\u793a\u5f20\u91cf\u503c\u53d8\u5316\u3002</p>\n</blockquote>",
      "created_at": "2025-07-23T01:01:09.595531"
    },
    {
      "id": 3,
      "teacher_id": 2,
      "title": "Pytorch\u5b9e\u73b0\u5377\u79ef",
      "content": "<p>```markdown</p>\n<h1>PyTorch\u5b9e\u73b0\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u6559\u5b66\u65b9\u6848</h1>\n<h2>1. \u6559\u5b66\u76ee\u6807</h2>\n<ul>\n<li><strong>\u77e5\u8bc6\u76ee\u6807</strong>  </li>\n<li>\u7406\u89e3\u5377\u79ef\u795e\u7ecf\u7f51\u7edc(CNN)\u7684\u57fa\u672c\u539f\u7406</li>\n<li>\u638c\u63e1PyTorch\u4e2d\u5377\u79ef\u5c42\u7684\u6838\u5fc3API</li>\n<li>\u719f\u6089\u56fe\u50cf\u6570\u636e\u5904\u7406\u6d41\u7a0b</li>\n<li><strong>\u6280\u80fd\u76ee\u6807</strong>  </li>\n<li>\u80fd\u4f7f\u7528<code>nn.Conv2d</code>\u6784\u5efa\u5377\u79ef\u5c42</li>\n<li>\u80fd\u5b9e\u73b0\u5b8c\u6574\u7684CNN\u524d\u5411\u4f20\u64ad</li>\n<li>\u80fd\u53ef\u89c6\u5316\u7279\u5f81\u56fe</li>\n</ul>\n<h2>2. \u77e5\u8bc6\u8bb2\u89e3</h2>\n<h3>2.1 \u5377\u79ef\u8fd0\u7b97\u539f\u7406</h3>\n<p>```python\nimport torch\nimport torch.nn as nn</p>\n<h1>\u5b9a\u4e49\u5355\u901a\u9053\u8f93\u5165/\u8f93\u51fa\u7684\u5377\u79ef\u6838</h1>\n<p>conv = nn.Conv2d(in_channels=1, out_channels=1, kernel_size=3, stride=1)\nprint(conv.weight.shape)  # \u8f93\u51fa: torch.Size([1, 1, 3, 3])\n```</p>\n<h3>2.2 PyTorch\u5377\u79ef\u5c42\u53c2\u6570</h3>\n<ul>\n<li><code>in_channels</code>: \u8f93\u5165\u901a\u9053\u6570\uff08\u5982RGB\u56fe\u50cf\u4e3a3\uff09</li>\n<li><code>out_channels</code>: \u5377\u79ef\u6838\u6570\u91cf</li>\n<li><code>kernel_size</code>: \u5377\u79ef\u6838\u5c3a\u5bf8\uff08\u59823\u6216(3,3)\uff09</li>\n<li><code>stride</code>: \u6b65\u957f\uff08\u9ed8\u8ba41\uff09</li>\n<li><code>padding</code>: \u8fb9\u7f18\u586b\u5145\uff08\u9ed8\u8ba40\uff09</li>\n</ul>\n<h3>2.3 \u7279\u5f81\u56fe\u53ef\u89c6\u5316</h3>\n<p>```python\nimport matplotlib.pyplot as plt</p>\n<p>def show_feature_map(output):\n    plt.figure(figsize=(10,5))\n    for i in range(output.shape[1]):\n        plt.subplot(4,8,i+1)\n        plt.imshow(output[0,i].detach().numpy(), cmap='gray')\n    plt.show()\n```</p>\n<h2>3. \u5b9e\u8bad\u7ec3\u4e60</h2>\n<h3>\u7ec3\u4e601\uff1a\u6784\u5efaLeNet-5\u57fa\u7840\u7ed3\u6784</h3>\n<p>```python\nclass LeNet(nn.Module):\n    def <strong>init</strong>(self):\n        super().<strong>init</strong>()\n        self.conv1 = nn.Conv2d(1, 6, 5)  # MNIST\u8f93\u5165\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)</p>\n<pre><code>def forward(self, x):\n    x = self.pool(torch.relu(self.conv1(x)))\n    x = self.pool(torch.relu(self.conv2(x)))\n    return x\n</code></pre>\n<p>```</p>\n<h3>\u7ec3\u4e602\uff1a\u81ea\u5b9a\u4e49\u5377\u79ef\u6838\u6548\u679c\u89c2\u5bdf</h3>\n<p>```python</p>\n<h1>\u521b\u5efa\u6c34\u5e73\u8fb9\u7f18\u68c0\u6d4b\u6838</h1>\n<p>custom_kernel = torch.tensor([[[[-1, -1, -1], \n                               [ 0,  0,  0],\n                               [ 1,  1,  1]]]], dtype=torch.float32)\nconv = nn.Conv2d(1, 1, 3, bias=False)\nconv.weight.data = custom_kernel\n```</p>\n<h2>4. \u65f6\u95f4\u5206\u914d\u5efa\u8bae</h2>\n<p>| \u6559\u5b66\u73af\u8282 | \u65f6\u957f |\n|---------|------|\n| \u5377\u79ef\u539f\u7406\u8bb2\u89e3 | 10min |\n| PyTorch API\u8be6\u89e3 | 15min |\n| \u5b9e\u8bad\u7ec3\u4e60\u6307\u5bfc | 15min |\n| \u603b\u7ed3\u7b54\u7591 | 5min |</p>\n<h2>5. \u6559\u5b66\u8d44\u6e90\u5efa\u8bae</h2>\n<ul>\n<li><strong>\u5b98\u65b9\u6587\u6863</strong><br />\n<a href=\"https://pytorch.org/docs/stable/generated/torch.nn.Conv2d.html\">PyTorch Conv2d\u6587\u6863</a></li>\n<li><strong>\u53ef\u89c6\u5316\u5de5\u5177</strong><br />\n<a href=\"https://poloclub.github.io/cnn-explainer/\">CNN Explainer</a></li>\n<li><strong>\u7ecf\u5178\u8bba\u6587</strong><br />\n  \u300aGradient-Based Learning Applied to Document Recognition\u300b(LeCun 1998)\n``` </li>\n</ul>\n<p>\u6ce8\uff1a\u672c\u65b9\u6848\u8bbe\u8ba1\u53c2\u8003\u4e86\u77e5\u8bc6\u5e93\u4e2dTensorFlow.js\u7684\u6559\u5b66\u7ed3\u6784\uff0c\u5c06\u6838\u5fc3\u6982\u5ff5\uff08\u5f20\u91cf/\u53d8\u91cf/\u64cd\u4f5c\uff09\u5bf9\u5e94\u8f6c\u6362\u4e3aPyTorch\u7684Tensor/Parameter/Function\u4f53\u7cfb\uff0c\u4fdd\u6301\"\u7406\u8bba\u2192API\u2192\u5b9e\u8df5\"\u7684\u9012\u8fdb\u5f0f\u6559\u5b66\u903b\u8f91\u3002</p>",
      "created_at": "2025-07-23T01:48:59.518947"
    }
  ]
}